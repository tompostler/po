trigger:
- main

pool:
  vmImage: 'windows-latest'

name: '$(Date:%y).$(DayOfYear).$(Rev:r)'

steps:

- task: gitversion/setup@0
  displayName: Install GitVersion
  inputs:
    versionSpec: '5.7.x'

- task: gitversion/execute@0
  displayName: Determine Version
  inputs:
    useConfigFile: true

- script: |
    echo Major: $(GitVersion.Major)
    echo Minor: $(GitVersion.Minor)
    echo Patch: $(GitVersion.Patch)
    echo PreReleaseTag: $(GitVersion.PreReleaseTag)
    echo PreReleaseTagWithDash: $(GitVersion.PreReleaseTagWithDash)
    echo PreReleaseLabel: $(GitVersion.PreReleaseLabel)
    echo PreReleaseNumber: $(GitVersion.PreReleaseNumber)
    echo WeightedPreReleaseNumber: $(GitVersion.WeightedPreReleaseNumber)
    echo BuildMetaData: $(GitVersion.BuildMetaData)
    echo BuildMetaDataPadded: $(GitVersion.BuildMetaDataPadded)
    echo FullBuildMetaData: $(GitVersion.FullBuildMetaData)
    echo MajorMinorPatch: $(GitVersion.MajorMinorPatch)
    echo SemVer: $(GitVersion.SemVer)
    echo LegacySemVer: $(GitVersion.LegacySemVer)
    echo LegacySemVerPadded: $(GitVersion.LegacySemVerPadded)
    echo AssemblySemVer: $(GitVersion.AssemblySemVer)
    echo AssemblySemFileVer: $(GitVersion.AssemblySemFileVer)
    echo FullSemVer: $(GitVersion.FullSemVer)
    echo InformationalVersion: $(GitVersion.InformationalVersion)
    echo BranchName: $(GitVersion.BranchName)
    echo EscapedBranchName: $(GitVersion.EscapedBranchName)
    echo Sha: $(GitVersion.Sha)
    echo ShortSha: $(GitVersion.ShortSha)
    echo NuGetVersionV2: $(GitVersion.NuGetVersionV2)
    echo NuGetVersion: $(GitVersion.NuGetVersion)
    echo NuGetPreReleaseTagV2: $(GitVersion.NuGetPreReleaseTagV2)
    echo NuGetPreReleaseTag: $(GitVersion.NuGetPreReleaseTag)
    echo VersionSourceSha: $(GitVersion.VersionSourceSha)
    echo CommitsSinceVersionSource: $(GitVersion.CommitsSinceVersionSource)
    echo CommitsSinceVersionSourcePadded: $(GitVersion.CommitsSinceVersionSourcePadded)
    echo UncommittedChanges: $(GitVersion.UncommittedChanges)
    echo CommitDate: $(GitVersion.CommitDate)

- task: Powershell@2
  displayName: Calculate MSBuild Versions
  inputs:
    targetType: 'inline'
    script: |
      $Version = "$(Build.BuildNumber)";
      $InfoVersion = $Version + '+' + "$(Build.SourceVersion)".Substring(0,7);

      Write-Host "Version:      $Version";
      Write-Host "InfoVersion:  $InfoVersion";

      throw 'Break here';

      Write-Output "##vso[task.setvariable variable=Version]$Version";
      Write-Output "##vso[task.setvariable variable=InfoVersion]$InfoVersion";

- task: DotNetCoreCLI@2
  displayName: Restore nuget packages
  inputs:
    command: restore
    projects: src/po.sln

- task: DotNetCoreCLI@2
  displayName: Build and zip to the staging directory (linux-x64)
  inputs:
    command: publish
    projects: src/po.sln
    arguments: '--no-restore --configuration Debug --runtime linux-x64 --output $(Build.ArtifactStagingDirectory)/output /p:Version="$(Version)" /p:InformationalVersion="$(InfoVersion)"'
    zipAfterPublish: true
    modifyOutputPath: true

- task: CopyFiles@2
  displayName: Copy deployment files to output
  inputs:
    sourceFolder: $(Build.SourcesDirectory)/deployment/
    contents: '**' 
    targetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  displayName: Publish build artifacts
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: drop
    publishLocation: Container
